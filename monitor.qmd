---
title: "Theatre Case Duration Prediction - Monitoring"
subtitle: "Shows analysis of real performance"
author: "COCH Data & Analytics Team"
date: today
format:
  html:
    code-fold: true
    toc: true
    toc-float: true
    embed-resources: true
execute:
  warning: false
  message: false
  cell: false  
---

```{python}
#| label: library import
import pandas as pd
import numpy as np
import pyodbc
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio
pio.templates.default = "plotly_white"
```

```{python}
#| label: data-imports
dsn = "coch_p2" 

read_connection = pyodbc.connect(f'DSN={dsn}', autocommit=True)

sql_query = "select * from InformationSandpitDB.datascience.CaseDuration_monitoring"
data = pd.read_sql_query(sql_query, read_connection)

read_connection.close()
```

```{python}
#| label: wrangling - numbers of predictions by week

# wrangle model names
data['model_name'] = data['model_version'].str.extract(r'_([a-z]+)') #this is a look back expression
data['model_name'] = data['model_name'].fillna('original')

# add a column weekstart
data['weekstart'] = data['model_prediction_date'].dt.to_period('W').dt.start_time
data['weekstart'] = data['weekstart'].dt.date

# add a column monthly
data['monthstart'] = data['model_prediction_date'].dt.to_period('M').dt.start_time
data['monthstart'] = data['monthstart'].dt.date

```

The charts below show the number of booked cases each week that had a prediction and have now happened. It normally takes 4-6 weeks between prediction and booking and a case taking place. We can use these cases to test the real world performance of the model.

```{python}
#| label: calculating mae and mape
data['model_abs_error'] = (data['CaseDuration'] - data['model_prediction']).abs()
data['model_absp_error'] = (data['model_abs_error'] / data['CaseDuration'])*100.0
data['cerner_abs_error'] = (data['CaseDuration'] - data['CernerEstimate']).abs()
data['cerner_absp_error'] = (data['cerner_abs_error'] / data['CaseDuration'])*100.0

# weekly summary
weekly_mae_summary = (
    data.groupby('weekstart')
        .agg(
            n=('weekstart', 'size'),
            model_mode=('model_name', lambda x: x.mode().iloc[0] if not x.mode().empty else np.nan),
            model_mae=('model_abs_error', 'mean'),
            model_mape=('model_absp_error', 'mean'),
            cerner_mae=('cerner_abs_error', 'mean'),
            cerner_mape=('cerner_absp_error', 'mean')
        )
        .reset_index()
)

# monthly summary
monthly_mae_summary = (
    data.groupby('monthstart')
        .agg(
            n=('monthstart', 'size'),
            model_mode=('model_name', lambda x: x.mode().iloc[0] if not x.mode().empty else np.nan),
            model_mae=('model_abs_error', 'mean'),
            model_mape=('model_absp_error', 'mean'),
            cerner_mae=('cerner_abs_error', 'mean'),
            cerner_mape=('cerner_absp_error', 'mean')
        )
        .reset_index()
)
```

```{python}
# Create a bar chart of weekly predictions
fig = px.bar(
    weekly_mae_summary,
    x='weekstart', 
    y='n',
    color='model_mode',
    title="Number of Predictions by Week"
)

fig.add_trace(go.Scatter(
    x=[min(weekly_mae_summary['weekstart']), max(weekly_mae_summary['weekstart'])],
    y=[24, 24],
    mode='lines',
    line=dict(color='red', dash='dash'),
    name='Average no. cases'
))

fig.update_layout(
    yaxis_title="Number of Predictions",
    xaxis_title=None,
    legend=dict(
        orientation="h",           
        yanchor="bottom",
        y=-0.2,                    
        xanchor="center",
        x=0.5
    ),
    xaxis=dict(
        tickmode='array',
        tickvals=weekly_mae_summary['weekstart'],
        tickformat='%d %b %Y'
    )
)
```

```{python}
# Create a monthly prediction count chart
fig = px.bar(
    monthly_mae_summary,
    x='monthstart', 
    y='n',
    color='model_mode',
    title="Number of Predictions by Month"
)

fig.add_trace(go.Scatter(
    x=[min(monthly_mae_summary['monthstart']), max(monthly_mae_summary['monthstart'])],
    y=[100, 100],
    mode='lines',
    line=dict(color='red', dash='dash'),
    name='Average no. cases'
))

fig.update_layout(
    yaxis_title="Number of Predictions",
    xaxis_title=None,
    legend=dict(
        orientation="h",           
        yanchor="bottom",
        y=-0.2,                    
        xanchor="center",
        x=0.5
    ),
    xaxis=dict(
        tickmode='array',
        tickvals=monthly_mae_summary['monthstart'],
        tickformat='%d %b %Y'
    )
)
```

```{python}
#| label: figure mape per week

fig = go.Figure()

fig.add_trace(go.Scatter(
    x=[min(weekly_mae_summary['weekstart']), max(weekly_mae_summary['weekstart'])],
    y=[32.75, 32.75], 
    mode='lines',
    line=dict(color='red', dash='dash'),
    name='Expected MAPE (biotical)', 
    showlegend=True,
    opacity=0.5
))

fig.add_trace(go.Scatter(
    x=[min(weekly_mae_summary['weekstart']), max(weekly_mae_summary['weekstart'])],
    y=[32.75+2.59, 32.75+2.59], 
    mode='lines',
    line=dict(color='black', dash='dash'),
    showlegend=False,
    opacity=0.25
))

fig.add_trace(go.Scatter(
    x=[min(weekly_mae_summary['weekstart']), max(weekly_mae_summary['weekstart'])],
    y=[32.75-2.59, 32.75-2.59], 
    mode='lines',
    line=dict(color='black', dash='dash'),
    showlegend=False,
    opacity=0.25
))

fig.add_trace(go.Scatter(
    x=weekly_mae_summary['weekstart'],
    y=weekly_mae_summary['model_mape'],
    mode='lines+markers',
    line=dict(color='black'),
    showlegend=True,
    name='Model'
))

fig.add_trace(go.Scatter(
    x=weekly_mae_summary['weekstart'],
    y=weekly_mae_summary['cerner_mape'],
    mode='lines+markers',
    line=dict(color='gray'),
    showlegend=True,
    name='Cerner baseline'
))


for model in weekly_mae_summary['model_mode'].unique():
    mask = weekly_mae_summary['model_mode'] == model
    fig.add_trace(go.Scatter(
        x=weekly_mae_summary.loc[mask, 'weekstart'],
        y=weekly_mae_summary.loc[mask, 'model_mape'],
        mode='markers',
        marker=dict(size=8),
        name=model
    ))

fig.update_layout(
  title="MAPE by Week",
  yaxis_title="MAPE (%)",
  legend=dict(
        orientation="h",           
        yanchor="bottom",
        y=-0.2,                    
        xanchor="center",
        x=0.5
    ),
  xaxis=dict(
    tickmode='array',
    tickvals=weekly_mae_summary['weekstart'],
    # Optional: format date ticks 
    tickformat='%d %b %Y'
  ))

fig.show()
```

```{python}
#| label: figure mape per month

fig = go.Figure()

fig.add_trace(go.Scatter(
    x=[min(monthly_mae_summary['monthstart']), max(monthly_mae_summary['monthstart'])],
    y=[32.75, 32.75], 
    mode='lines',
    line=dict(color='red', dash='dash'),
    name='Expected MAPE (biotical)', 
    showlegend=True,
    opacity=0.5
))

fig.add_trace(go.Scatter(
    x=[min(monthly_mae_summary['monthstart']), max(monthly_mae_summary['monthstart'])],
    y=[32.75+2.59, 32.75+2.59], 
    mode='lines',
    line=dict(color='black', dash='dash'),
    showlegend=False,
    opacity=0.25
))

fig.add_trace(go.Scatter(
    x=[min(monthly_mae_summary['monthstart']), max(monthly_mae_summary['monthstart'])],
    y=[32.75-2.59, 32.75-2.59], 
    mode='lines',
    line=dict(color='black', dash='dash'),
    showlegend=False,
    opacity=0.25
))

fig.add_trace(go.Scatter(
    x=monthly_mae_summary['monthstart'],
    y=monthly_mae_summary['model_mape'],
    mode='lines+markers',
    line=dict(color='black'),
    showlegend=True,
    name='Model'
))

fig.add_trace(go.Scatter(
    x=monthly_mae_summary['monthstart'],
    y=monthly_mae_summary['cerner_mape'],
    mode='lines+markers',
    line=dict(color='gray'),
    showlegend=True,
    name='Cerner baseline'
))


for model in monthly_mae_summary['model_mode'].unique():
    mask = monthly_mae_summary['model_mode'] == model
    fig.add_trace(go.Scatter(
        x=monthly_mae_summary.loc[mask, 'monthstart'],
        y=monthly_mae_summary.loc[mask, 'model_mape'],
        mode='markers',
        marker=dict(size=8),
        name=model
    ))

fig.update_layout(
  title="MAPE by Month",
  yaxis_title="MAPE (%)",
  legend=dict(
        orientation="h",           
        yanchor="bottom",
        y=-0.2,                    
        xanchor="center",
        x=0.5
    ),
  xaxis=dict(
    tickmode='array',
    tickvals=monthly_mae_summary['monthstart'],
    # Optional: format date ticks 
    tickformat='%d %b %Y'
  ))

fig.show()

```

```{python}
#| label: figure mae per week

fig = go.Figure()

# fig.add_trace(go.Scatter(
#     x=[min(weekly_mae_summary['weekstart']), max(weekly_mae_summary['weekstart'])],
#     y=[32.75, 32.75], 
#     mode='lines',
#     line=dict(color='red', dash='dash'),
#     name='Expected MAPE (biotical)', 
#     showlegend=True,
#     opacity=0.5
# ))

# fig.add_trace(go.Scatter(
#     x=[min(weekly_mae_summary['weekstart']), max(weekly_mae_summary['weekstart'])],
#     y=[32.75+2.59, 32.75+2.59], 
#     mode='lines',
#     line=dict(color='black', dash='dash'),
#     showlegend=False,
#     opacity=0.25
# ))

# fig.add_trace(go.Scatter(
#     x=[min(weekly_mae_summary['weekstart']), max(weekly_mae_summary['weekstart'])],
#     y=[32.75-2.59, 32.75-2.59], 
#     mode='lines',
#     line=dict(color='black', dash='dash'),
#     showlegend=False,
#     opacity=0.25
# ))

fig.add_trace(go.Scatter(
    x=weekly_mae_summary['weekstart'],
    y=weekly_mae_summary['model_mae'],
    mode='lines+markers',
    line=dict(color='black'),
    showlegend=True,
    name='Model'
))

fig.add_trace(go.Scatter(
    x=weekly_mae_summary['weekstart'],
    y=weekly_mae_summary['cerner_mae'],
    mode='lines+markers',
    line=dict(color='gray'),
    showlegend=True,
    name='Cerner baseline'
))


for model in weekly_mae_summary['model_mode'].unique():
    mask = weekly_mae_summary['model_mode'] == model
    fig.add_trace(go.Scatter(
        x=weekly_mae_summary.loc[mask, 'weekstart'],
        y=weekly_mae_summary.loc[mask, 'model_mae'],
        mode='markers',
        marker=dict(size=8),
        name=model
    ))

fig.update_layout(
  title="MAE by Week",
  yaxis_title="MAE (Mins)",
  legend=dict(
        orientation="h",           
        yanchor="bottom",
        y=-0.2,                    
        xanchor="center",
        x=0.5
    ),
  xaxis=dict(
    tickmode='array',
    tickvals=weekly_mae_summary['weekstart'],
    # Optional: format date ticks 
    tickformat='%d %b %Y'
  ))

fig.show()
```


```{python}
#| label: figure mae per month

fig = go.Figure()

# fig.add_trace(go.Scatter(
#     x=[min(monthly_mae_summary['monthstart']), max(monthly_mae_summary['monthstart'])],
#     y=[32.75, 32.75], 
#     mode='lines',
#     line=dict(color='red', dash='dash'),
#     name='Expected MAPE (biotical)', 
#     showlegend=True,
#     opacity=0.5
# ))

# fig.add_trace(go.Scatter(
#     x=[min(monthly_mae_summary['monthstart']), max(monthly_mae_summary['monthstart'])],
#     y=[32.75+2.59, 32.75+2.59], 
#     mode='lines',
#     line=dict(color='black', dash='dash'),
#     showlegend=False,
#     opacity=0.25
# ))

# fig.add_trace(go.Scatter(
#     x=[min(monthly_mae_summary['monthstart']), max(monthly_mae_summary['monthstart'])],
#     y=[32.75-2.59, 32.75-2.59], 
#     mode='lines',
#     line=dict(color='black', dash='dash'),
#     showlegend=False,
#     opacity=0.25
# ))

fig.add_trace(go.Scatter(
    x=monthly_mae_summary['monthstart'],
    y=monthly_mae_summary['model_mae'],
    mode='lines+markers',
    line=dict(color='black'),
    showlegend=True,
    name='Model'
))

fig.add_trace(go.Scatter(
    x=monthly_mae_summary['monthstart'],
    y=monthly_mae_summary['cerner_mae'],
    mode='lines+markers',
    line=dict(color='gray'),
    showlegend=True,
    name='Cerner baseline'
))


for model in monthly_mae_summary['model_mode'].unique():
    mask = monthly_mae_summary['model_mode'] == model
    fig.add_trace(go.Scatter(
        x=monthly_mae_summary.loc[mask, 'monthstart'],
        y=monthly_mae_summary.loc[mask, 'model_mae'],
        mode='markers',
        marker=dict(size=8),
        name=model
    ))

fig.update_layout(
  title="MAE by Month",
  yaxis_title="MAE (Mins)",
  legend=dict(
        orientation="h",           
        yanchor="bottom",
        y=-0.2,                    
        xanchor="center",
        x=0.5
    ),
  xaxis=dict(
    tickmode='array',
    tickvals=monthly_mae_summary['monthstart'],
    # Optional: format date ticks 
    tickformat='%d %b %Y'
  ))

fig.show()

```

### Comments
Model so far performing worse than would expect from values obtained in training, although this might be skewed due to small numbers so far. Model MAPE worse than Cerner MAPE, but model MAE generally better than Cerner MAE. I think this is because model seems to perform better for long operations, whereas often quite wrong with short procedures (where the percentage error can be high but absolute error still low) and Cerner is the opposite.